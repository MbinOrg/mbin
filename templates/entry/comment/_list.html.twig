{% if showNested is not defined %}
    {% if app.request.cookies.get(constant('App\\Controller\\User\\ThemeSettingsController::ENTRY_COMMENTS_VIEW')) is same as constant('App\\Controller\\User\\ThemeSettingsController::CHAT') %}
        {% set showNested = false %}
    {% else %}
        {% set showNested = true %}
    {% endif %}
{% endif %}
<section class="comments entry-comments comments-tree"
         data-controller="subject-list"
         data-action="{{- app.request.cookies.get(constant('App\\Controller\\User\\ThemeSettingsController::KBIN_GENERAL_DYNAMIC_LISTS')) is same as 'true' ? 'notifications:EntryCommentCreatedNotification@window->subject-list#addComment' : 'notifications:EntryCommentCreatedNotification@window->subject-list#increaseCounter' -}}">
    {% for comment in comments %}
        {{ component('entry_comment', {
            comment: comment,
            showNested: showNested,
            dateAsUrl: dateAsUrl is defined ? dateAsUrl : false,
            showMagazineName: magazine is not defined or not magazine,
            showEntryTitle: entry is not defined or not entry
        }) }}
    {% endfor %}
    {% if(comments.haveToPaginate is defined and comments.haveToPaginate) %}
        {{ pagerfanta(comments, null, {'pageParameter':'[p]'}) }}
    {% endif %}
    {% if not comments|length %}
        <aside class="section section--muted">
            <p>{{ 'no_comments'|trans }}</p>
        </aside>
    {% elseif app.request.cookies.get(constant('App\\Controller\\User\\ThemeSettingsController::ENTRY_COMMENTS_VIEW')) is null or app.request.cookies.get(constant('App\\Controller\\User\\ThemeSettingsController::ENTRY_COMMENTS_VIEW')) is same as constant('App\\Controller\\User\\ThemeSettingsController::TREE') %}
        <div class="comment-line--2"></div>
        <div class="comment-line--3"></div>
        <div class="comment-line--4"></div>
        <div class="comment-line--5"></div>
        <div class="comment-line--6"></div>
        <div class="comment-line--7"></div>
        <div class="comment-line--8"></div>
        <div class="comment-line--9"></div>
    {% endif %}
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const blockquotes = document.querySelectorAll('.comments-tree blockquote');
    blockquotes.forEach(function(blockquote) {
        blockquote.addEventListener('mouseup', function(e) {
            const isTextSelected = window.getSelection().toString().length !== 0;
            if (isTextSelected) {
                return;
            }
            const blackListedElements = ['a', 'button']
            if (blackListedElements.includes(e.target.tagName.toLowerCase())) {
                return;
            }

            const isHideAction = !blockquote.classList.contains('hide-nested')
            const levelMatch = blockquote.className.match(/comment-level--(\d+)/);
            const level = levelMatch ? parseInt(levelMatch[1], 10) : 1;

            let nextSibling = blockquote.nextElementSibling;
            let updateCount = 0;
            let lastBlockquote;

            while (nextSibling) {
                const nextSiblingLevelMatch = nextSibling.className.match(/comment-level--(\d+)/);
                if (!nextSiblingLevelMatch || parseInt(nextSiblingLevelMatch[1], 10) <= level) {
                    lastBlockquote = nextSibling;
                    break;
                }

                nextSibling.style.display = isHideAction ? 'none' : 'grid';
                nextSibling = nextSibling.nextElementSibling;
                updateCount++;
            }

            if (updateCount < 1) {
                return;
            }
            
            blockquote.classList.toggle('hide-nested');

            if (isHideAction) {
                const hiddenDiv = document.createElement('blockquote');
                hiddenDiv.classList = `section comment collapsed-tree comment-level--${level}`
                hiddenDiv.innerText = `${updateCount} comments collapsed...`;
                lastBlockquote.insertAdjacentElement('beforebegin', hiddenDiv);
            } else {
                lastBlockquote.remove()
            }
        });
    });
});
</script>